import React, { useState } from 'react';
import {
	Paper,
	Grid,
	TextField,
	Checkbox,
	FormControlLabel,
	FormLabel,
	Stack,
	Button,
	Box,
} from '@mui/material';

import UploadButton from '../../UploadButton/UploadButton.component';
import DataFromDropdown from '../../Dropdown/Dropdown.compoenent';
import FirstComponent from '../../DatePicker/DatePicker.component';

import {
	formTextLabel,
	formSelectLabels,
} from '../../../constants/stepperLables.constant';

const problemImage = require('../../../../../assets/problemImageTest.png');

const CreationFrom = ({ readOnly, request }) => {
	//!: we still have a problem to get the locations because we can't the props from the child so we should wait intel using redux .
	//!: the same thing about the image it working but you need get the image from the child
	const [data, setData] = useState({});
	console.log(data);
	//?: the handleCheck is called in FormControlLabel and every this is working because it get the value that is defined in CheckBox
	const checkList = [];
	const handleCheck = (event) => {
		if (!checkList.includes(event.target.value)) {
			checkList.push(event.target.value);
		} else {
			const index = checkList.indexOf(event.target.value);
			if (index > -1) {
				//?: only splice array when item is found
				checkList.splice(index, 1); //?: 2nd parameter means remove one item only
			}
		}
	};

	//?: this function is generatting a random id exemple : 'Problem-57f5czfmsq'
	const autoGeneratedId = () => {
		const uniqueId = 'Problem-' + Math.random().toString(36).substr(2, 20);
		return uniqueId;
	};

	//?: this is for get the description value .
	let descreption;
	const handleChangeDescription = (event) => {
		descreption = event.target.value;
		console.log(descreption);
	};

	//?: this is for getting the currante date
	const CurranteDate = () => {
		const date = new Date();
		return date;
	};

	//?: getting the two locations from the dropdown
	const localisation = {
		departement: 'Pavillan 1',
		subDepartement: 'Chamber 202',
	};

	const handleClick = () => {
		setData({
			id: autoGeneratedId(),
			problemType: checkList,
			descreption,
			image: '../../../../../assets/problemImageTest.png',
			date: new Date(),
			localisation,
			readedByManager: false,
		});
	};
	return (
		<Paper
			sx={{
				display: 'flex',
				justifyContent: 'center',
				alignItems: 'center',
				margin: '5rem 0',
			}}
			elevation={0}
		>
			<Grid
				container
				spacing={4}
				sx={{
					width: '80%',
					padding: '2rem 3rem 3rem 2rem',
				}}
			>
				<Grid item xs={6}>
					<FormLabel component='legend'>
						Nature de l'anomalie:
					</FormLabel>
					<Grid
						container
						sx={{
							margin: '1rem 0',
						}}
						spacing={1}
					>
						{formSelectLabels.map((label) => {
							// // !: there is a problem in the checked but checked={(label === request.problemType)} is working.
							let checkBox = <Checkbox value={label} />;
							if (request.problemType && readOnly) {
								const checkedList = request.problemType;
								const isChecked = checkedList.includes(label);
								checkBox = (
									<Checkbox checked={isChecked} disabled />
								);
							}
							return (
								<Grid item>
									<FormControlLabel
										control={checkBox}
										onChange={(event) => {
											handleCheck(event);
										}}
										label={label}
									/>
								</Grid>
							);
						})}
					</Grid>
				</Grid>
				<Grid item xs={6}>
					<TextField
						id='outlined-multiline-static'
						label={formTextLabel}
						multiline
						rows={10}
						onChange={(event) => {
							handleChangeDescription(event);
						}}
						sx={{
							width: '90%',
						}}
					/>
				</Grid>
				<Grid item xs={6}>
					<Stack spacing={2}>
						<DataFromDropdown label={'Departement'} />
						<DataFromDropdown label={'Sub Departement'} />
						<FirstComponent isDisabled={true} />
						<UploadButton />
					</Stack>
				</Grid>
				<Grid item xs={6}>
					<Box width='100%' height='100%'>
						<img
							src={problemImage}
							alt='problem Image'
							width='100%'
							height='100%'
							style={{
								borderRadius: '1rem',
								boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px',
							}}
						/>
					</Box>
				</Grid>
				<Grid xs={12}>
					<Stack justifyContent={'center'} alignItems={'center'}>
						<Button
							variant='contained'
							onClick={handleClick}
							sx={{
								margin: '3rem 0',
							}}
							size='large'
						>
							Submit
						</Button>
					</Stack>
				</Grid>
			</Grid>
		</Paper>
	);
};

export default CreationFrom;
